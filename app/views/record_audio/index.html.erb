<form id="audio-form" method="get" action="/audio/save">
  <input type="button" id="start-recording" value="Start Recording">
  <input type="button" id="stop-recording" value="Stop Recording">
  <input type="hidden" id="audio-blob" name="audio_blob">
  <input type="submit" value="Save Audio">
</form>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        var startRecordingButton = document.getElementById('start-recording');
        var stopRecordingButton = document.getElementById('stop-recording');
        var audioBlobInput = document.getElementById('audio-blob');
        var audioStream;
        var mediaRecorder;
        var chunks = []; // Define the chunks variable outside the event listener

        startRecordingButton.addEventListener('click', function() {
            navigator.mediaDevices.getUserMedia({ audio: true })
                .then(function(stream) {
                    audioStream = stream;
                    mediaRecorder = new MediaRecorder(stream);
                    chunks = []; // Clear the chunks array before starting a new recording
                    mediaRecorder.addEventListener('dataavailable', function(event) {
                        chunks.push(event.data);
                    });
                    mediaRecorder.start();

                    startRecordingButton.disabled = true;
                    stopRecordingButton.disabled = false;
                })
                .catch(function(error) {
                    console.error('Error accessing microphone:', error);
                });
        });
        stopRecordingButton.addEventListener('click', function() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();

                mediaRecorder.addEventListener('stop', function() {
                    var audioBlob = new Blob(chunks, { type: 'audio/webm' });
                    audioBlobInput.value = window.URL.createObjectURL(audioBlob);

                    startRecordingButton.disabled = false;
                    stopRecordingButton.disabled = true;
                });
                audioStream.getTracks().forEach(function(track) {
                    track.stop();
                });
            }
        });
    });


</script>